"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var helpers_1 = require("../../helpers");
var src_1 = require("../../../src");
describe("Cache#watch", function () {
    var fullGraph = helpers_1.query("{\n    foo {\n      id\n      bar {\n        id\n        name\n      }\n      baz {\n        id\n        name\n      }\n    }\n  }");
    var simpleGraph = helpers_1.query("{\n    foo {\n      id\n      bar {\n        id\n        name\n      }\n    }\n  }");
    var partialOverlap = helpers_1.query("{\n    foo {\n      id\n      baz {\n        id\n        name\n      }\n    }\n  }");
    var indirectEdit = helpers_1.query("{\n    thing {\n      id\n      name\n    }\n  }");
    var baseState = {
        foo: {
            id: 1,
            bar: {
                id: 2,
                name: 'bar',
            },
            baz: {
                id: 3,
                name: 'baz',
            },
        },
    };
    var cache;
    beforeEach(function () {
        cache = new src_1.Cache(helpers_1.strictConfig);
        cache.write(fullGraph, baseState);
    });
    it("triggers a callback immediately upon registration", function () {
        var updates = [];
        cache.watch(simpleGraph, function (newResult) { return updates.push(newResult); });
        expect(updates.length).to.eq(1);
        var _a = tslib_1.__read(updates, 1), update = _a[0];
        expect(update.result).to.deep.eq(baseState);
        expect(update.complete).to.eq(true);
    });
    it("triggers a callback after writing the same query with new values", function () {
        var updates = [];
        cache.watch(simpleGraph, function (newResult) { return updates.push(newResult); });
        cache.write(simpleGraph, { foo: { id: 1, bar: { id: 3, name: 'bar' } } });
        expect(updates.length).to.eq(2);
        var _a = tslib_1.__read(updates, 2), update = _a[1];
        expect(update.result.foo.bar.id).to.eq(3);
        expect(update.complete).to.eq(true);
    });
    it("doesn't trigger a callback if unrelated entities change", function () {
        var updates = [];
        cache.watch(simpleGraph, function (newResult) { return updates.push(newResult); });
        cache.write(partialOverlap, { foo: { id: 1, baz: { id: 3, name: 'baz2' } } });
        expect(updates.length).to.eq(1);
    });
    it("triggers an update on indirect edits to an entity", function () {
        var updates = [];
        cache.watch(simpleGraph, function (newResult) { return updates.push(newResult); });
        cache.write(indirectEdit, { thing: { id: 2, name: 'bar2' } });
        expect(updates.length).to.eq(2);
        var _a = tslib_1.__read(updates, 2), update = _a[1];
        expect(update.result.foo.bar.name).to.eq('bar2');
        expect(update.complete).to.eq(true);
    });
    it("triggers an update on reference updates from the query root", function () {
        var updates = [];
        cache.watch(simpleGraph, function (newResult) { return updates.push(newResult); });
        cache.write(simpleGraph, { foo: { id: 100, bar: { id: 2, name: 'bar' } } });
        expect(updates.length).to.eq(2);
        var _a = tslib_1.__read(updates, 2), update = _a[1];
        expect(update.result.foo.id).to.eq(100);
        expect(update.complete).to.eq(true);
    });
    it("handles transitions from complete to incomplete", function () {
        var updates = [];
        cache.watch(simpleGraph, function (newResult) { return updates.push(newResult); });
        cache.write(partialOverlap, { foo: { id: 100, baz: { id: 3, name: 'baz' } } });
        expect(updates.length).to.eq(2);
        var _a = tslib_1.__read(updates, 2), update = _a[1];
        expect(update.result.foo.id).to.eq(100);
        expect(update.result.foo.bar).to.eq(undefined);
        expect(update.complete).to.eq(false);
    });
    it("handles transitions from incomplete to complete", function () {
        var updates = [];
        var cache2 = new src_1.Cache(helpers_1.strictConfig);
        cache2.write(partialOverlap, { foo: { id: 1, baz: { id: 3, name: 'baz' } } });
        cache2.watch(simpleGraph, function (newResult) { return updates.push(newResult); });
        cache2.write(simpleGraph, { foo: { id: 1, bar: { id: 2, name: 'bar' } } });
        expect(updates.length).to.eq(2);
        var _a = tslib_1.__read(updates, 2), initial = _a[0], update = _a[1];
        expect(initial.complete).to.eq(false);
        expect(update.complete).to.eq(true);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hTdGF0aWNGaWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXRjaFN0YXRpY0ZpZWxkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5Q0FBb0Q7QUFDcEQsb0NBQXFDO0FBR3JDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7SUFFdEIsSUFBTSxTQUFTLEdBQUcsZUFBSyxDQUFDLG9JQVl0QixDQUFDLENBQUM7SUFFSixJQUFNLFdBQVcsR0FBRyxlQUFLLENBQUMsb0ZBUXhCLENBQUMsQ0FBQztJQUVKLElBQU0sY0FBYyxHQUFHLGVBQUssQ0FBQyxvRkFRM0IsQ0FBQyxDQUFDO0lBRUosSUFBTSxZQUFZLEdBQUcsZUFBSyxDQUFDLGtEQUt6QixDQUFDLENBQUM7SUFFSixJQUFNLFNBQVMsR0FBRztRQUNoQixHQUFHLEVBQUU7WUFDSCxFQUFFLEVBQUUsQ0FBQztZQUNMLEdBQUcsRUFBRTtnQkFDSCxFQUFFLEVBQUUsQ0FBQztnQkFDTCxJQUFJLEVBQUUsS0FBSzthQUNaO1lBQ0QsR0FBRyxFQUFFO2dCQUNILEVBQUUsRUFBRSxDQUFDO2dCQUNMLElBQUksRUFBRSxLQUFLO2FBQ1o7U0FDRjtLQUNGLENBQUM7SUFFRixJQUFJLEtBQVksQ0FBQztJQUNqQixVQUFVLENBQUM7UUFDVCxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsc0JBQVksQ0FBQyxDQUFDO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1FBQ3RELElBQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7UUFDbEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsVUFBQSxTQUFTLElBQUksT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7UUFFL0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUEsK0JBQWtCLEVBQWpCLGNBQU0sQ0FBWTtRQUN6QixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrRUFBa0UsRUFBRTtRQUNyRSxJQUFNLE9BQU8sR0FBa0IsRUFBRSxDQUFDO1FBQ2xDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFVBQUEsU0FBUyxJQUFJLE9BQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1FBQy9ELEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUxRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUIsSUFBQSwrQkFBb0IsRUFBakIsY0FBTSxDQUFZO1FBQzNCLE1BQU0sQ0FBRSxNQUFNLENBQUMsTUFBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseURBQXlELEVBQUU7UUFDNUQsSUFBTSxPQUFPLEdBQWtCLEVBQUUsQ0FBQztRQUNsQyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxVQUFBLFNBQVMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQXZCLENBQXVCLENBQUMsQ0FBQztRQUMvRCxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFOUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1FBQ3RELElBQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7UUFDbEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsVUFBQSxTQUFTLElBQUksT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7UUFDL0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFOUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUEsK0JBQW9CLEVBQWpCLGNBQU0sQ0FBWTtRQUMzQixNQUFNLENBQUUsTUFBTSxDQUFDLE1BQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZEQUE2RCxFQUFFO1FBQ2hFLElBQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7UUFDbEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsVUFBQSxTQUFTLElBQUksT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7UUFDL0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTVFLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFBLCtCQUFvQixFQUFqQixjQUFNLENBQVk7UUFDM0IsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlEQUFpRCxFQUFFO1FBQ3BELElBQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7UUFDbEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsVUFBQSxTQUFTLElBQUksT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7UUFDL0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRS9FLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFBLCtCQUFvQixFQUFqQixjQUFNLENBQVk7UUFDM0IsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlEQUFpRCxFQUFFO1FBQ3BELElBQU0sT0FBTyxHQUFrQixFQUFFLENBQUM7UUFDbEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFLLENBQUMsc0JBQVksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5RSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxVQUFBLFNBQVMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQXZCLENBQXVCLENBQUMsQ0FBQztRQUNoRSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFM0UsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUEsK0JBQTJCLEVBQTFCLGVBQU8sRUFBRSxjQUFNLENBQVk7UUFFbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDIn0=